#!/bin/bash
set -u -o pipefail
safe_source () { [[ ! -z ${1:-} ]] && source $1; _dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"; _sdir=$(dirname "$(readlink -f "$0")"); }; safe_source
# end of bash boilerplate

safe_source $_sdir/lib/all.sh
set +e # do not exit on error

ts(){
    echo "[ `timestamp_log` ]"
}

edge=${1:-} # "attach" or "detach"
if [[ -z $edge ]]; then
    echo "First parameter should be edge (attach or detach)"
    exit 1
fi

hook=${2:-}
if [[ -z $hook ]]; then
    echo "Hook script is required."
    exit 1
fi
if [[ -f $PWD/$hook ]]; then
    hook=$PWD/$hook
elif [[ -f $_sdir/$hook ]]; then
    hook=$_sdir/$hook
elif `hash $hook`; then
    hook=`which $hook`
else
    echo "Hook script can not be found."
    exit 1
fi

if [[ ! -x $hook ]]; then
    echo "Hook script should be executable."
    exit 1
fi

[[ $(whoami) = "root" ]] || { sudo $0 $*; exit 0; }

# re-align rest of the parameters
shift
shift

echo "Hook script will be used: $hook $*"


echo_green "`ts` Starting daemon..."
connected0=true
connected=false
check_period=2s
first_check_done=false
while true; do
	if ! is_cable_plugged eth0; then
        if [[ $connected0 = true ]] && [[ $connected = false ]]; then
            if [[ "$edge" == "detach" ]]; then
                if ! $first_check_done; then
                    echo_red "`ts` Cable is detached (initial status)"
                    first_check_done=true
                else
                    echo_red "`ts` Cable is detached, triggering $(basename $hook)"
                    $hook $*
                fi
            else
                echo_red "`ts` Cable is detached."
            fi
        fi
        connected0=$connected
        connected=false
	else
    	if [[ $connected0 = false ]] && [[ $connected = true ]]; then
            if [[ "$edge" == "attach" ]]; then
                if ! $first_check_done; then
                    echo_green "`ts` Cable is attached (initial status)"
                    first_check_done=true
                else
                    echo_green "`ts` Cable is attached, triggering $(basename $hook)"
                    $hook $*
                fi
            else
                echo_green "`ts` Cable is attached."
            fi
        fi
        connected0=$connected
        connected=true
    fi
    sleep $check_period
done
