#!/bin/bash
set -eu -o pipefail
safe_source () { [[ ! -z ${1:-} ]] && source $1; _dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"; _sdir=$(dirname "$(readlink -f "$0")"); }; safe_source
# end of bash boilerplate

safe_source $_sdir/lib/all.sh

[[ $(whoami) = "root" ]] || { sudo $0 "$@"; exit 0; }

show_help(){
    local script=$(basename $0)
    local reason=${1:-}
    if [[ ! -z $reason ]]; then
        cat <<REASON

    ERROR: $reason

    -------------------------------
REASON
    fi
    cat <<HELP

    Connect to 'your-essid':

    	$script your-essid

    Add a new configuration:

    	$script --add foo --password 1234 [--name alias]

    --stop      : Disconnect and cleanup
    --search    : Search for available WiFi networks
    --list      : List available saved connections
    --status    : Show current connection status
    --3g        : Connect via 3g usb modem

HELP
    exit
}

# Parse command line arguments
# ---------------------------
# Initialize parameters
cmd='connect'
# ---------------------------
args=("$@")
_count=1
while :; do
    key="${1:-}"
    case $key in
        -h|-\?|--help|'')
            show_help    # Display a usage synopsis.
            exit
            ;;
        # --------------------------------------------------------
        --add) shift
            essid="${1:-}"
            shift
            cmd='add'
            ;;
        --password)       # Takes an option argument; ensure it has been specified.
            shift
            if [ "${1:-}" ]; then
                password="$1"
                shift
            fi
            ;;
        --name)       # Takes an option argument; ensure it has been specified.
            shift
            if [ "$1" ]; then
                name="$1"
                shift
            fi
            ;;
        --stop)       # Takes an option argument; ensure it has been specified.
            shift
            cmd='stop'
            break
            ;;
        --search)       # Takes an option argument; ensure it has been specified.
            shift
            cmd='search'
            break
            ;;
        --status) shift
            iw dev
            exit
            ;;
        --list) shift
            cmd="list"
            ;;
        --3g) shift
            cmd="3g"
            ;;
        # --------------------------------------------------------
        -*) # Handle unrecognized options
            echo
            echo "Unknown option: $1"
            show_help
            exit 1
            ;;
        *)  # Generate the positional arguments: $_arg1, $_arg2, ...
            [[ ! -z ${1:-} ]] && declare _arg$((_count++))="$1" && shift
    esac
    [[ -z ${1:-} ]] && break
done; set -- "${args[@]}"
# use $_arg1 in place of $1, $_arg2 in place of $2 and so on, "$@" is intact


# include hardware configuration
config="$_sdir/../config.sh"
if [[ ! -f $config ]]; then
    echo "No configuration file ($(realpath $config)) found."
    echo
    echo "Use $_sdir/config.sample as a template."
    exit 1
fi

safe_source $config


conf_dir="$_sdir/../passwords.d"
case $cmd in
    connect)
        essid="$1"
        conf_file="${conf_dir}/$essid.conf"
        ;;
    add)
        [[ -z $essid ]] && show_help "ESSID is required"
        name="${name:-$essid}"
        conf_file="${conf_dir}/${name}.conf"
        if [[ -f "$conf_file" ]]; then
            backup="${conf_file}_`date +%Y%m%dT%H%M`"
            echo_yellow "Warning: Moving old ${name}.conf as $backup"
            mv "$conf_file" "$backup"
        fi
        echo "Adding $name ($essid)"
        $_sdir/config-wifi "$essid" "$password" "$conf_file"
        ;;
    stop)
        $_sdir/connect-wifi stop
        sudo ifconfig $_wlan0 down
        ;;
    search)
        sudo ifconfig $_wlan0 up
        sudo iwlist $_wlan0 scan | grep -i essid
        ;;
    list)
        ls $conf_dir
        ;;
    3g)
        $_sdir/connect-3g
        ;;
esac

case $cmd in
    connect|add)
        # connect
        $_sdir/connect-wifi $_wlan0 "$conf_file"
        ;;
esac
